-->To execute unix commands in Python we have package called "os".
--> By importing os we can use statements like "system" to execute commands.
Ex: os.system("ls -s")
--> We have package called "subprocess" which replaces "os".
Ex: subprocess.call("ls", shell=True)
  -->By using subprocess, we can communicate with shell from our python script. It basically executes the commands on shell and will get output from our python script.
  --> In the above example, it is calling "ls" commmand. "shell = True" means it is doing everything in the shell.
--> To store the output in a variable using subprocess.
Ex: output = subprocess.check_output("ls", shell=True)
  (this gives output as bytes)
--> We have subprocess.getoutput(cmd) to give output as string.
--> we have json.loads() to parse the string type to dictionary in python.
-->We can also use subprocess.check_output() but the subprocess gives the output in bytes. We need to give the output of this command as input in next subprocess command which requires input as string. So , to get the output from subprocess as string, we are using subprocess.getoutput().




-->This is for json.loads()
#Now we need the instanceId. So, the output string can be parsed(changing the data structure to store data) to JSON to extract the id easily using json.loads() function. But in python we dont have json. So, we get output in the form of dictionary. In that dictinary we may have list in the values and in that lists we may have dictionaries.So here: 
--> output of inst is string format.
>> type(inst)
<class 'str'>
--> let parsedint = json.loads(inst)
>>type(parsedinst)
<class 'dict'>
 >>parsedinst.keys()
 dict_keys(['Groups', 'Instances', 'OwnerId', 'ReservationId'])
-->now will take the key 'Instances
>>type(parsedinst['Instances'])
<class 'list'>
-->Types of all the keys:
    >> type(parsedinst['Groups'])
    <class 'list'>
    >> type(parsedinst['Instances'])
    <class 'list'>
    >> type(parsedinst['OwnerId'])
    <class 'str'>
    >> type(parsedinst['ReservationId'])
    <class 'str'>
--> Now in Instances list we have one item, which is dictionary.
>> type(parsedinst['Instances'][0])
<class 'dict'>
--> Now will retrieve our required instanceId which is the value of the key 'InstanceID'
> parsedinst['Instances'][0]['InstanceId']
'i-030f31cf7a1b76344'

# inst_Id = json.loads(inst)['Instances'][0]['InstanceId']

-----------
argeparse : We are using Python's argparse to accept arguments by the tool.
 --> We have two different arguments in options:
    -->Optional arguments: They are optional to use by user.
    -->Positional arguments: They should be provided mandatory by the user. 

--> We are calling all the functions inside the main function.

-------------------------------------------
boto3: 
We have also used boto3 to get the instance state. boto3 is the an AWS SDK for python to operate and get attributes of AWS resources.

------***********------------
Usage: python3 -i ec2backup.py [-v volume ID] [-h help] dir
 ex: 1) python3 -i ec2backup.py -v vol-892yyabbs89c ~/Documents
     2) pyhton3 -i ec2backup.py ~/Documents

 ***In  ssh function we are executing few commands:
       --> After compressing the file locally, copy the .tar file to remote machine using 'scp' command.
       --> Now, after ssh create a directory called ~/backup (~/ indicates /home/ubuntu/).
       $ sudo mkdir ~/backup
       --> Create a file system before creating a mount point.
       $ sudo mkfs.ext4 /dev/xvdf
       --> Now create a mount point at ~/backup to access the data stored for that specific device(volume) ex: /dev/sdf or /dev/xvdf (at remote)
       $ sudo mount /dev/xvdf ~/backup/
       -->Now, we move scp'ied .tar file to the the mounted location.
       $ sudo mv ~/backup.tar ~/backup/
       --> Get into ~/backup/ directory and untar the .tar file.
       $ cd ~/backup && tar xvf backup.tar

  Note: After all these steps we have our data succegsfully uploaded to EBS volume. If we want to attach this volume to a different instance and access data.  --> After attaching to a different instance. Create a directory and mount point to it (dont create a file system here because we already created to our device before).
  $ mkidr ~/data 
  $ sudo mount /dev/xvdh ~/data

--> Now we can access the data from ~/data directory.
  $ cd ~/data

Note: Attaching a volume means simply inserting our USB device to our computer. Mounting means our OS accepts the device and creates a partiton for that device. Mount point acts like a gate where we can access the data stored in the volume. Thats'why we need to create a file system and then mount point to acces the data.


what is main function in python (if__name__=="__main__":) ?
    -->
